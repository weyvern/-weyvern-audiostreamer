{"version":3,"file":"index.es.js","sources":["../src/AudioStreamer.jsx"],"sourcesContent":["import { useRef, useState } from 'react';\n\nconst AudioStreamer = ({\n  label,\n  loading,\n  fetcher,\n  containerClassName,\n  audioClassName,\n  buttonClassName\n}) => {\n  const ref = useRef(null);\n  const [showControls, setShowControls] = useState(false);\n\n  const getAudio = async () => {\n    try {\n      if (!prompt) throw new Error('Prompt is required');\n      const res = await fetcher();\n      if (!res.ok) throw new Error(await res.json());\n      // Create a new MediaSource and set the audio source to the URL\n      const mediaSource = new MediaSource();\n      ref.current.src = URL.createObjectURL(mediaSource);\n      setShowControls(true);\n      // Add an event listener to the MediaSource to handle the sourceopen event\n      mediaSource.addEventListener('sourceopen', async () => {\n        // Create a new SourceBuffer and set the MIME type to audio/mpeg\n        const sourceBuffer = mediaSource.addSourceBuffer('audio/mpeg');\n        // Get the reader from the response body\n        const reader = res.body.getReader();\n        // Create a queue to store the chunks of data. This is because appendBuffer can only be called when the source buffer is not updating\n        const queue = [];\n        // Create a function to process the queue\n        const processQueue = () => {\n          // If the source buffer is not updating and the queue is not empty\n          if (!sourceBuffer.updating && queue.length > 0) {\n            // Shift the first chunk from the queue\n            const chunk = queue.shift();\n            // Append the chunk to the source buffer\n            sourceBuffer.appendBuffer(chunk);\n          }\n        };\n        // After the updateend event is fired, check the queue\n        sourceBuffer.addEventListener('updateend', () => processQueue());\n\n        let result;\n        // While the reader is not done\n        while (!(result = await reader.read()).done) {\n          // If the result is done, end the stream\n          if (result.done) return mediaSource.endOfStream();\n          // Push the next chunk to the queue\n          queue.push(result.value);\n          // Process the queue\n          processQueue();\n        }\n      });\n      // Play the audio\n      ref.current.play();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  if (loading) return null;\n  return (\n    <div className={containerClassName}>\n      <audio ref={ref} controls={showControls} className={audioClassName}></audio>\n      <button className={buttonClassName} onClick={getAudio} disabled={showControls}>\n        {label}\n      </button>\n    </div>\n  );\n};\n\nexport default AudioStreamer;\n"],"names":["AudioStreamer","label","loading","fetcher","containerClassName","audioClassName","buttonClassName","ref","useRef","showControls","setShowControls","useState","_jsxs","className","children","_jsx","controls","onClick","async","prompt","Error","res","ok","json","mediaSource","MediaSource","current","src","URL","createObjectURL","addEventListener","sourceBuffer","addSourceBuffer","reader","body","getReader","queue","processQueue","updating","length","chunk","shift","appendBuffer","result","read","done","endOfStream","push","value","play","error","console","disabled"],"mappings":"+FAEMA,MAAAA,EAAgBA,EACpBC,QACAC,UACAC,UACAC,qBACAC,iBACAC,sBAEA,MAAMC,EAAMC,EAAO,OACZC,EAAcC,GAAmBC,GAAS,GAkDjD,OAAIT,EAAgB,KAElBU,EAAA,MAAA,CAAKC,UAAWT,EAAmBU,UACjCC,EAAA,QAAA,CAAOR,IAAKA,EAAKS,SAAUP,EAAcI,UAAWR,IACpDU,EAAA,SAAA,CAAQF,UAAWP,EAAiBW,QApDvBC,UACf,IACE,IAAKC,OAAQ,MAAM,IAAIC,MAAM,sBAC7B,MAAMC,QAAYlB,IAClB,IAAKkB,EAAIC,GAAI,MAAM,IAAIF,YAAYC,EAAIE,QAEvC,MAAMC,EAAc,IAAIC,YACxBlB,EAAImB,QAAQC,IAAMC,IAAIC,gBAAgBL,GACtCd,GAAgB,GAEhBc,EAAYM,iBAAiB,cAAcZ,UAEzC,MAAMa,EAAeP,EAAYQ,gBAAgB,cAE3CC,EAASZ,EAAIa,KAAKC,YAElBC,EAAQ,GAERC,EAAeA,KAEnB,IAAKN,EAAaO,UAAYF,EAAMG,OAAS,EAAG,CAE9C,MAAMC,EAAQJ,EAAMK,QAEpBV,EAAaW,aAAaF,EAC5B,GAKF,IAAIG,EAEJ,IAJAZ,EAAaD,iBAAiB,aAAa,IAAMO,QAIxCM,QAAeV,EAAOW,QAAQC,MAAM,CAE3C,GAAIF,EAAOE,KAAM,OAAOrB,EAAYsB,cAEpCV,EAAMW,KAAKJ,EAAOK,OAElBX,GACF,KAGF9B,EAAImB,QAAQuB,MACb,CAAC,MAAOC,GACPC,QAAQD,MAAMA,EAChB,GAOyDE,SAAU3C,EAAaK,SAC3Eb,MAEC"}